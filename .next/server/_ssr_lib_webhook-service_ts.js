"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_webhook-service_ts";
exports.ids = ["_ssr_lib_webhook-service_ts"];
exports.modules = {

/***/ "(ssr)/./lib/webhook-service.ts":
/*!********************************!*\
  !*** ./lib/webhook-service.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebhookService: () => (/* binding */ WebhookService)\n/* harmony export */ });\n// Webhook Service - Centralized webhook management\nclass WebhookService {\n    static{\n        // Use NEXT_PUBLIC_ prefixed variables for client-side access\n        this.MAIN_WEBHOOK_URL =  false ? 0 : process.env.MAKE_WEBHOOK_URL || \"https://hook.eu2.make.com/71go2x4zwsnha4r1f4en1g9gjxpk3ts4\";\n    }\n    static{\n        this.SLACK_WEBHOOK_URL =  false ? 0 : process.env.SLACK_WEBHOOK_URL || process.env.NEXT_PUBLIC_SLACK_WEBHOOK_URL;\n    }\n    /**\n   * Send contract data to main Make.com webhook for processing\n   */ static async sendToMainWebhook(contractData) {\n        if (!this.MAIN_WEBHOOK_URL) {\n            throw new Error('Main webhook URL not configured');\n        }\n        console.log('üîÑ Sending to main webhook:', this.MAIN_WEBHOOK_URL);\n        try {\n            const response = await fetch(this.MAIN_WEBHOOK_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'ContractGen-App/1.0'\n                },\n                body: JSON.stringify({\n                    ...contractData,\n                    timestamp: new Date().toISOString(),\n                    source: 'contract-app'\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\n            }\n            // Try to parse as JSON, fallback to text if it fails\n            let result;\n            const contentType = response.headers.get('content-type');\n            const responseText = await response.text();\n            try {\n                result = JSON.parse(responseText);\n            } catch  {\n                // If JSON parsing fails, treat as plain text response\n                result = {\n                    status: 'accepted',\n                    message: responseText.trim()\n                };\n            }\n            console.log('‚úÖ Main webhook success:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå Main webhook error:', error);\n            throw error;\n        }\n    }\n    /**\n   * Send PDF ready notification to Slack webhook\n   */ static async sendToSlackWebhook(pdfData) {\n        if (!this.SLACK_WEBHOOK_URL) {\n            console.warn('‚ö†Ô∏è Slack webhook URL not configured, skipping notification');\n            return null;\n        }\n        console.log('üì± Sending to Slack webhook:', this.SLACK_WEBHOOK_URL);\n        try {\n            const response = await fetch(this.SLACK_WEBHOOK_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'ContractGen-App/1.0'\n                },\n                body: JSON.stringify({\n                    ...pdfData,\n                    timestamp: new Date().toISOString(),\n                    source: 'contract-app-pdf-ready'\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Slack webhook failed: ${response.status} ${response.statusText}`);\n            }\n            // Try to parse as JSON, fallback to text if it fails\n            let result;\n            const responseText = await response.text();\n            try {\n                result = JSON.parse(responseText);\n            } catch  {\n                // If JSON parsing fails, treat as plain text response\n                result = {\n                    status: 'accepted',\n                    message: responseText.trim()\n                };\n            }\n            console.log('‚úÖ Slack webhook success:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå Slack webhook error:', error);\n            // Don't throw - Slack notification failure shouldn't break the main flow\n            return null;\n        }\n    }\n    /**\n   * Process contract and trigger both webhooks in sequence\n   */ static async processContract(contractData) {\n        try {\n            // Step 1: Send to main webhook for processing\n            const mainResult = await this.sendToMainWebhook(contractData);\n            // Step 2: If main processing succeeds and we have a PDF URL, notify Slack\n            if (mainResult?.pdf_url) {\n                await this.sendToSlackWebhook({\n                    contract_number: contractData.contract_number || contractData.id,\n                    pdf_url: mainResult.pdf_url,\n                    status: mainResult.status || 'ready',\n                    client_name: contractData.client_name || contractData.second_party_name,\n                    employer_name: contractData.employer_name || contractData.first_party_name\n                });\n            }\n            return mainResult;\n        } catch (error) {\n            console.error('‚ùå Contract processing failed:', error);\n            throw error;\n        }\n    }\n    /**\n   * Test both webhooks\n   */ static async testWebhooks() {\n        const testData = {\n            contract_number: 'TEST-001',\n            client_name: 'Test Client',\n            employer_name: 'Test Employer',\n            test_mode: true\n        };\n        console.log('üß™ Testing webhooks...');\n        try {\n            // Test main webhook\n            console.log('Testing main webhook...');\n            await this.sendToMainWebhook(testData);\n            // Test Slack webhook\n            console.log('Testing Slack webhook...');\n            await this.sendToSlackWebhook({\n                contract_number: 'TEST-001',\n                pdf_url: 'https://example.com/test.pdf',\n                status: 'test',\n                client_name: 'Test Client',\n                employer_name: 'Test Employer'\n            });\n            console.log('‚úÖ All webhooks tested successfully');\n            return {\n                success: true,\n                message: 'All webhooks working'\n            };\n        } catch (error) {\n            console.error('‚ùå Webhook test failed:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/webhook-service.ts\n");

/***/ })

};
;