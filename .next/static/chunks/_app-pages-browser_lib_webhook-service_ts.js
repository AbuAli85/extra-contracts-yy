"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_webhook-service_ts"],{

/***/ "(app-pages-browser)/./lib/webhook-service.ts":
/*!********************************!*\
  !*** ./lib/webhook-service.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebhookService: () => (/* binding */ WebhookService)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Webhook Service - Centralized webhook management\nclass WebhookService {\n    /**\n   * Send contract data to main Make.com webhook for processing\n   */ static async sendToMainWebhook(contractData) {\n        if (!this.MAIN_WEBHOOK_URL) {\n            throw new Error('Main webhook URL not configured');\n        }\n        console.log('üîÑ Sending to main webhook:', this.MAIN_WEBHOOK_URL);\n        try {\n            const response = await fetch(this.MAIN_WEBHOOK_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'ContractGen-App/1.0'\n                },\n                body: JSON.stringify({\n                    ...contractData,\n                    timestamp: new Date().toISOString(),\n                    source: 'contract-app'\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Webhook failed: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            // Try to parse as JSON, fallback to text if it fails\n            let result;\n            const contentType = response.headers.get('content-type');\n            const responseText = await response.text();\n            try {\n                result = JSON.parse(responseText);\n            } catch (e) {\n                // If JSON parsing fails, treat as plain text response\n                result = {\n                    status: 'accepted',\n                    message: responseText.trim()\n                };\n            }\n            console.log('‚úÖ Main webhook success:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå Main webhook error:', error);\n            throw error;\n        }\n    }\n    /**\n   * Send PDF ready notification to Slack webhook\n   */ static async sendToSlackWebhook(pdfData) {\n        if (!this.SLACK_WEBHOOK_URL) {\n            console.warn('‚ö†Ô∏è Slack webhook URL not configured, skipping notification');\n            return null;\n        }\n        console.log('üì± Sending to Slack webhook:', this.SLACK_WEBHOOK_URL);\n        try {\n            const response = await fetch(this.SLACK_WEBHOOK_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'ContractGen-App/1.0'\n                },\n                body: JSON.stringify({\n                    ...pdfData,\n                    timestamp: new Date().toISOString(),\n                    source: 'contract-app-pdf-ready'\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Slack webhook failed: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            // Try to parse as JSON, fallback to text if it fails\n            let result;\n            const responseText = await response.text();\n            try {\n                result = JSON.parse(responseText);\n            } catch (e) {\n                // If JSON parsing fails, treat as plain text response\n                result = {\n                    status: 'accepted',\n                    message: responseText.trim()\n                };\n            }\n            console.log('‚úÖ Slack webhook success:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå Slack webhook error:', error);\n            // Don't throw - Slack notification failure shouldn't break the main flow\n            return null;\n        }\n    }\n    /**\n   * Process contract and trigger both webhooks in sequence\n   */ static async processContract(contractData) {\n        try {\n            // Step 1: Send to main webhook for processing\n            const mainResult = await this.sendToMainWebhook(contractData);\n            // Step 2: If main processing succeeds and we have a PDF URL, notify Slack\n            if (mainResult === null || mainResult === void 0 ? void 0 : mainResult.pdf_url) {\n                await this.sendToSlackWebhook({\n                    contract_number: contractData.contract_number || contractData.id,\n                    pdf_url: mainResult.pdf_url,\n                    status: mainResult.status || 'ready',\n                    client_name: contractData.client_name || contractData.second_party_name,\n                    employer_name: contractData.employer_name || contractData.first_party_name\n                });\n            }\n            return mainResult;\n        } catch (error) {\n            console.error('‚ùå Contract processing failed:', error);\n            throw error;\n        }\n    }\n    /**\n   * Test both webhooks\n   */ static async testWebhooks() {\n        const testData = {\n            contract_number: 'TEST-001',\n            client_name: 'Test Client',\n            employer_name: 'Test Employer',\n            test_mode: true\n        };\n        console.log('üß™ Testing webhooks...');\n        try {\n            // Test main webhook\n            console.log('Testing main webhook...');\n            await this.sendToMainWebhook(testData);\n            // Test Slack webhook\n            console.log('Testing Slack webhook...');\n            await this.sendToSlackWebhook({\n                contract_number: 'TEST-001',\n                pdf_url: 'https://example.com/test.pdf',\n                status: 'test',\n                client_name: 'Test Client',\n                employer_name: 'Test Employer'\n            });\n            console.log('‚úÖ All webhooks tested successfully');\n            return {\n                success: true,\n                message: 'All webhooks working'\n            };\n        } catch (error) {\n            console.error('‚ùå Webhook test failed:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n}\n// Use NEXT_PUBLIC_ prefixed variables for client-side access\nWebhookService.MAIN_WEBHOOK_URL =  true ? \"https://hook.eu2.make.com/71go2x4zwsnha4r1f4en1g9gjxpk3ts4\" : 0;\nWebhookService.SLACK_WEBHOOK_URL =  true ? process.env.NEXT_PUBLIC_SLACK_WEBHOOK_URL : 0;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/webhook-service.ts\n"));

/***/ })

}]);